[{"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\index.js":"1","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\App.js":"2","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Header.js":"3","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Buscador.js":"4","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MenuLateral.js":"5","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MainContent.js":"6","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\CardsGrid.js":"7","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MyCard.js":"8","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\store\\store.js":"9","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\reducers\\filtrosAvanzadosReducer.js":"10","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\types\\types.js":"11","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\actions\\filtrosAvanzados.js":"12","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Footer.js":"13"},{"size":187,"mtime":1611373714105,"results":"14","hashOfConfig":"15"},{"size":533,"mtime":1611547262872,"results":"16","hashOfConfig":"15"},{"size":1759,"mtime":1611551832808,"results":"17","hashOfConfig":"15"},{"size":4366,"mtime":1611543341446,"results":"18","hashOfConfig":"15"},{"size":7533,"mtime":1611546313621,"results":"19","hashOfConfig":"15"},{"size":367,"mtime":1611546475323,"results":"20","hashOfConfig":"15"},{"size":1511,"mtime":1611546420044,"results":"21","hashOfConfig":"15"},{"size":4778,"mtime":1611551127973,"results":"22","hashOfConfig":"15"},{"size":358,"mtime":1611541524423,"results":"23","hashOfConfig":"15"},{"size":552,"mtime":1611545677224,"results":"24","hashOfConfig":"15"},{"size":76,"mtime":1611545506595,"results":"25","hashOfConfig":"15"},{"size":1251,"mtime":1611545865917,"results":"26","hashOfConfig":"15"},{"size":459,"mtime":1611552327073,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"hrtu7w",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\index.js",[],["59","60"],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\App.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Header.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Buscador.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MenuLateral.js",["61","62"],"import React, { useState, useEffect } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport KeyboardArrowDown from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport {filtroDomicilio,filtroTarjeta,filtroTanqueVenta,filtroTanqueRenta,filtroTanqueRecarga,filtroConcentradorVenta,filtroConcentradorRenta} from \"../actions/filtrosAvanzados\";\r\n\r\nexport const MenuLateral = () =>{\r\n\r\n    const dispatch = useDispatch();\r\n    const state = useSelector( state => state.filtrosAvanzados );\r\n\r\n    \r\n    const [tanque, setTanque] = useState(false)\r\n    const [concentrador, setConcentrador] = useState(false)\r\n    const [domicilio, setDomicilio] = useState(false)\r\n    const [tarjeta, setTarjeta] = useState(false)\r\n    \r\n    \r\n    const toggle = (id) =>{\r\n        \r\n        switch (id) {\r\n            case 0:\r\n                setTanque(!tanque);\r\n                break;\r\n            case 1: \r\n                setConcentrador(!concentrador);\r\n                break;\r\n            case 2:\r\n                setDomicilio(!domicilio);\r\n                break;\r\n            case 3: \r\n                setTarjeta(!tarjeta);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const cambiarFiltro = (id) => {\r\n        switch (id) {\r\n            case 0:\r\n                dispatch( filtroTanqueVenta(!state.tanqueVenta) );\r\n                break;\r\n            case 1:\r\n                dispatch( filtroTanqueRenta(!state.tanqueRenta) );\r\n                break;\r\n            case 2:\r\n                dispatch( filtroTanqueRecarga(!state.tanqueRecarga) );\r\n                break;\r\n            case 3:\r\n                dispatch( filtroConcentradorVenta(!state.concentradorVenta) );\r\n                break;\r\n            case 4:\r\n                dispatch( filtroConcentradorRenta(!state.concentradorRenta) );\r\n                break;\r\n            case 5:\r\n                dispatch( filtroDomicilio(!state.domicilioSwitch) );\r\n                break;\r\n            case 6:\r\n                dispatch( filtroTarjeta(!state.tarjetaSwitch) );\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div className=\"menu-lateral-container col-sm-3\">\r\n            <div className=\"menu-lateral-header\">\r\n                Filtros avanzados\r\n            </div>\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Header onClick={ () => toggle(0) } id=\"tanque-header\">\r\n                    <div className=\"flecha-texto\">\r\n                        Tanques\r\n                    </div>\r\n                    <div className=\"flecha\">\r\n                        { !tanque ? <KeyboardArrowDown /> : <KeyboardArrowUp /> }\r\n                    </div>\r\n                </Card.Header>\r\n                { tanque && \r\n                    <div className=\"menu-checkbox\">\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" checked={state.tanqueVenta} onChange={() => cambiarFiltro(0)} name=\"checkedA\" />}\r\n                                label=\"Venta\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" checked={state.tanqueRenta} onChange={() => cambiarFiltro(1) } name=\"checkedA\" />}\r\n                                label=\"Renta\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" checked={state.tanqueRecarga} onChange={() => cambiarFiltro(2) } name=\"checkedA\" />}\r\n                                label=\"Recarga\"\r\n                            />\r\n                        </FormGroup>\r\n                    </div>\r\n                }\r\n            </Card>\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Header onClick={() => toggle(1) } id=\"tanque-header\">\r\n                    <div className=\"flecha-texto\">\r\n                        Concentradores\r\n                    </div>\r\n                    <div className=\"flecha\">\r\n                        { !concentrador ? <KeyboardArrowDown /> : <KeyboardArrowUp /> }\r\n                    </div>\r\n                </Card.Header>\r\n                { concentrador && \r\n                    <div className=\"menu-checkbox\">\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" checked={state.concentradorVenta} onChange={() => cambiarFiltro(3) } name=\"checkedA\" />}\r\n                                label=\"Venta\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"primary\" checked={state.concentradorRenta} onChange={() => cambiarFiltro(4) } name=\"checkedA\" />}\r\n                                label=\"Renta\"\r\n                            />\r\n                        </FormGroup>\r\n                    </div>\r\n                }\r\n            </Card>\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Header onClick={() => toggle(2) } id=\"tanque-header\">\r\n                    <div className=\"flecha-texto\">\r\n                        Servicio a domicilio\r\n                    </div>\r\n                    <div className=\"flecha\">\r\n                        { !domicilio ? <KeyboardArrowDown /> : <KeyboardArrowUp /> }\r\n                    </div>\r\n                </Card.Header>\r\n                \r\n                    { domicilio && \r\n                        <div className=\"switch-container\">\r\n                            <Switch\r\n                                className=\"switch\"\r\n                                checked={state.domicilioSwitch}\r\n                                onChange={() => cambiarFiltro(5)}\r\n                                name=\"checkedA\"\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </div>\r\n                    }\r\n            </Card>\r\n            <Card style={{ width: '100%' }}>\r\n                <Card.Header onClick={ () => toggle(3) } id=\"tanque-header\">\r\n                    <div className=\"flecha-texto\">\r\n                        Pago con tarjeta\r\n                    </div>\r\n                    <div className=\"flecha\">\r\n                        { !tarjeta ? <KeyboardArrowDown /> : <KeyboardArrowUp /> }\r\n                    </div>\r\n                </Card.Header>\r\n                    { tarjeta && \r\n                        <div className=\"switch-container\">\r\n                            <Switch\r\n                                checked={state.tarjetaSwitch}\r\n                                onChange={() => cambiarFiltro(6)}\r\n                                name=\"checkedA\"\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </div>\r\n                    }\r\n            </Card>\r\n        </div>\r\n    );\r\n}","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MainContent.js",["63","64","65"],"import React, { useState, useEffect } from 'react';\r\nimport  CardsGrid  from \"./CardsGrid\";\r\nimport { MenuLateral } from \"./MenuLateral\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nexport const MainContent = () =>{\r\n\r\n    return(\r\n        <div className=\"main-container col-12\">\r\n            <MenuLateral />\r\n            <CardsGrid />\r\n        </div>\r\n    );\r\n}","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\CardsGrid.js",["66","67","68","69","70","71"],"import React, { useState, useEffect } from 'react';\r\nimport MyCard from \"./MyCard.js\"\r\nimport data from '../img/data.json'\r\nimport {useSelector} from \"react-redux\";\r\n\r\nexport default function CardsGrid(props) {  \r\n\r\n  const state = useSelector( state => state.filtrosAvanzados );\r\n  \r\n  const [filteredData, setFilteredData] = useState(data)\r\n  \r\n\r\n  let filters = [state.domicilioSwitch, state.tarjetaSwitch]\r\n\r\n\r\n  useEffect(() => {\r\n    setFilteredData(data)\r\n    \r\n    if(state.domicilioSwitch){\r\n      setFilteredData(data.filter(distribuidor => distribuidor.a_domicilio == true))\r\n    } else if(state.tarjetaSwitch){\r\n      // console.log(\"success\")\r\n      setFilteredData(data.filter(distribuidor => distribuidor.pago_con_tarjeta == true))\r\n      \r\n    }\r\n    \r\n    \r\n  }, [state])\r\n\r\n\r\n  const distribuidores_con_tanque = data.filter(distribuidor => distribuidor.tanques[0] != null);  //TODO:quitar este filtro\r\n  const distribuidores_con_concentradores = data.filter(distribuidor => distribuidor.concentradores[0] != null);  //TODO:quitar este filtro\r\n  const distribuidores_completos = data.filter(distribuidor => distribuidor.tanques[0] != null && distribuidor.concentradores[0] != null);  //TODO:quitar este filtro\r\n\r\n\r\n  \r\n  \r\n  return (\r\n    <div className=\"tarjetas-container col-sm-9\" >\r\n      {filteredData.map((distribuidor) =>\r\n        <MyCard \r\n          key={distribuidor.nombre_distribuidor}\r\n          distribuidor = {distribuidor}\r\n        />\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n  \r\n}\r\n","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\MyCard.js",["72","73","74","75","76"],"import Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\n\r\n\r\nexport default function MyCard(props) { \r\n  const {\r\n    nombre_distribuidor,\r\n    horario,\r\n    estado,\r\n    direccion,\r\n    ciudad,\r\n    a_domicilio,\r\n    pago_con_tarjeta,\r\n    notas,\r\n    telefono,\r\n    ultima_actualizacion,\r\n    concentradores,\r\n    tanques,\r\n  }= props.distribuidor\r\n\r\n  var dateFormat = require(\"dateformat\");\r\n  dateFormat.i18n = {\r\n    dayNames: [\r\n      \"Dom\",\r\n      \"Lun\",\r\n      \"Mar\",\r\n      \"Miér\",\r\n      \"Jue\",\r\n      \"Vie\",\r\n      \"Sáb\",\r\n      \"Dom\",\r\n      \"Lunes\",\r\n      \"Martes\",\r\n      \"Miércoles\",\r\n      \"Jueves\",\r\n      \"Viernes\",\r\n      \"Sábado\",\r\n    ],\r\n    monthNames: [\r\n      \"Ene\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Abr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Ago\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dic\",\r\n      \"Enero\",\r\n      \"Febrero\",\r\n      \"Marzo\",\r\n      \"Abril\",\r\n      \"Mayo\",\r\n      \"Junio\",\r\n      \"Julio\",\r\n      \"Agosto\",\r\n      \"Septiembre\",\r\n      \"Octubre\",\r\n      \"Noviembre\",\r\n      \"Dicembre\",\r\n    ],\r\n    timeNames: [\"a\", \"p\", \"am\", \"pm\", \"A\", \"P\", \"AM\", \"PM\"],\r\n  };\r\n\r\n  // let tanques_renta = tanques[0].disponibilidad_renta\r\n  // let tanques_venta = tanques[0].disponibilidad_venta\r\n  // let tanques_recarga = tanques[0].disponibilidad_recarga\r\n  \r\n\r\n  // let concentradores_renta = concentradores[0].disponibilidad_renta\r\n  // let concentradores_venta = concentradores[0].disponibilidad_venta\r\n  \r\n  \r\n\r\n  function disponibilidadPicker(tanques) {\r\n    let disponibilidad\r\n\r\n    \r\n    if(tanques <= 2){\r\n      disponibilidad = <Badge variant=\"danger\">Baja{tanques}</Badge>\r\n    }\r\n    else if(tanques > 2 &&  tanques <= 4){\r\n      disponibilidad = <Badge variant=\"warning\">Media{tanques}</Badge>\r\n    }\r\n    else if(tanques > 4){\r\n      disponibilidad = <Badge variant=\"success\">Alta{tanques}</Badge>\r\n    }\r\n    else{\r\n      disponibilidad = <Badge variant=\"dark\">Sin Información</Badge>\r\n    }    \r\n    return disponibilidad    \r\n  }\r\n\r\n  return (\r\n    <div className=\"col-6 card-lencho\">\r\n      <Card bg={\"light\"}>\r\n        <Card.Header>\r\n          <small className=\"text-muted \">Última actualización: {dateFormat(`${ultima_actualizacion}`, \"mmm dd yyyy\")} a las {dateFormat(`${ultima_actualizacion}`, \"HH:MM:ss\")} </small>        \r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Card.Title className=\"card-title\">{nombre_distribuidor}</Card.Title>\r\n          <Card.Subtitle className=\"text-muted\">Tanques:</Card.Subtitle>\r\n          <Container>          \r\n            <Row>\r\n              <Col>\r\n                Renta: \r\n              </Col>\r\n              <Col>\r\n                Venta: \r\n              </Col>\r\n              <Col>\r\n                Recarga: \r\n              </Col>\r\n            </Row>          \r\n          </Container>\r\n          <br/>\r\n          <Card.Subtitle className=\"text-muted\">Concentradores:</Card.Subtitle>\r\n          <Container>          \r\n            <Row>\r\n              <Col>\r\n                Renta: \r\n              </Col>\r\n              <Col>\r\n                Venta: \r\n              </Col>            \r\n            </Row>          \r\n          </Container>\r\n          \r\n          <br/>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">\r\n            A domicilio:\r\n            {a_domicilio ? <CheckIcon style={{color:\"blue\"}}/> : <CloseIcon style={{color:\"red\"}}/>}\r\n          </Card.Subtitle>\r\n\r\n          <Card.Subtitle className=\"text-muted\">\r\n            Pago con tarjeta:\r\n            {pago_con_tarjeta ? <CheckIcon style={{color:\"blue\"}}/> : <CloseIcon style={{color:\"red\"}}/> }\r\n          </Card.Subtitle>\r\n          <br/>\r\n          <Card.Subtitle className=\"text-muted\">Horario:</Card.Subtitle>\r\n          <p>{horario}</p>\r\n          <Card.Subtitle className=\"text-muted\">Dirección:</Card.Subtitle>\r\n          <p>{direccion}</p>\r\n\r\n          <br/>\r\n          <Card.Subtitle className=\"mb-2 text-muted\">Notas:</Card.Subtitle>        \r\n          <Card.Text>\r\n            {notas}\r\n          </Card.Text>\r\n          \r\n        </Card.Body>\r\n        \r\n        <Container className=\"mycard-footer\">          \r\n          <Row>\r\n            <Col className=\"map\">            \r\n              <Card.Link href=\"#\" >Mapa</Card.Link>\r\n            </Col>\r\n            <Col className=\"tel\">\r\n              <Card.Link href=\"#\">{telefono}</Card.Link>\r\n            </Col>            \r\n          </Row>          \r\n        </Container>                      \r\n        \r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\store\\store.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\reducers\\filtrosAvanzadosReducer.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\types\\types.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\actions\\filtrosAvanzados.js",[],"C:\\Users\\SPARTAN PC\\Documents\\GitHub\\oxigeno.cc.front\\src\\Componentes\\Footer.js",["77","78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"88","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":12},{"ruleId":"84","severity":1,"message":"89","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":1,"column":27,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"90","line":4,"column":10,"nodeType":"86","messageId":"87","endLine":4,"endColumn":21},{"ruleId":"84","severity":1,"message":"91","line":13,"column":7,"nodeType":"86","messageId":"87","endLine":13,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":20,"column":76,"nodeType":"94","messageId":"95","endLine":20,"endColumn":78},{"ruleId":"92","severity":1,"message":"93","line":23,"column":81,"nodeType":"94","messageId":"95","endLine":23,"endColumn":83},{"ruleId":"84","severity":1,"message":"96","line":31,"column":9,"nodeType":"86","messageId":"87","endLine":31,"endColumn":34},{"ruleId":"84","severity":1,"message":"97","line":32,"column":9,"nodeType":"86","messageId":"87","endLine":32,"endColumn":42},{"ruleId":"84","severity":1,"message":"98","line":33,"column":9,"nodeType":"86","messageId":"87","endLine":33,"endColumn":33},{"ruleId":"84","severity":1,"message":"99","line":15,"column":5,"nodeType":"86","messageId":"87","endLine":15,"endColumn":11},{"ruleId":"84","severity":1,"message":"100","line":17,"column":5,"nodeType":"86","messageId":"87","endLine":17,"endColumn":11},{"ruleId":"84","severity":1,"message":"101","line":23,"column":5,"nodeType":"86","messageId":"87","endLine":23,"endColumn":19},{"ruleId":"84","severity":1,"message":"102","line":24,"column":5,"nodeType":"86","messageId":"87","endLine":24,"endColumn":12},{"ruleId":"84","severity":1,"message":"103","line":84,"column":12,"nodeType":"86","messageId":"87","endLine":84,"endColumn":32},{"ruleId":"84","severity":1,"message":"104","line":2,"column":8,"nodeType":"86","messageId":"87","endLine":2,"endColumn":17},{"ruleId":"84","severity":1,"message":"105","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":17},{"ruleId":"106","severity":1,"message":"107","line":12,"column":37,"nodeType":"108","endLine":12,"endColumn":86},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.","'filters' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'distribuidores_con_tanque' is assigned a value but never used.","'distribuidores_con_concentradores' is assigned a value but never used.","'distribuidores_completos' is assigned a value but never used.","'estado' is assigned a value but never used.","'ciudad' is assigned a value but never used.","'concentradores' is assigned a value but never used.","'tanques' is assigned a value but never used.","'disponibilidadPicker' is defined but never used.","'Jumbotron' is defined but never used.","'Container' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-global-assign","no-unsafe-negation"]